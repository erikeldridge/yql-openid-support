<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>Erik Eldridge</author>
        <description>Unit tests for openid.assoc.xml</description>
        <sampleQuery>select * from {table}</sampleQuery>
		<documentationURL>http://wiki.github.com/ydn/yql-openid-support/</documentationURL>
    </meta>
    <bindings>
        <select>
            <inputs></inputs>
            <execute><![CDATA[

			//credit: http://javascript.crockford.com/remedial.html
			if(!String.prototype.supplant){String.prototype.supplant=function(o){return this.replace(/{([^{}]*)}/g,function(a,b){var r=o[b];return typeof r==='string'||typeof r==='number'?r:a;});};}if(!String.prototype.trim){String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"");};}
			
			var tableUri = 'http://github.com/yql/yql-tables/raw/master/openid/openid.assoc.xml';
						
			//cases
			//ref: http://openid.net/specs/openid-authentication-2_0.html#normalization_example
			testCases = [
				function(){
					var output = {
						'name': 'invalid uri structure'
					};
					
					var query = 'use "{tableUri}" as table; select * from table where uri="{uri}"'.supplant({
						tableUri: tableUri,
						uri: 'open.login.yahooapis.com/openid/op/auth'
					});
					
					var results = y.query( query ).results;
					
					//tests
					if ( results.success ) {
						output['fail'] = 'table should return an error for invalid uri';
						return output;
					}
					
					var validAssoc = results.success['mac_key'] && results.success['assoc_handle'];
					if ( !validAssoc ) {
						output['fail'] = 'assoc should have mac_key, assoc_handle, etc defined';
						return output;
					}
					
					//pass if no tests fail
					output['pass'] = ''
					return output;
				}(),
				function(){
					var output = {
						'name': 'valid uri, valid assoc'
					};
					
					var query = 'use "{tableUri}" as table; select * from table where uri="{uri}"'.supplant({
						tableUri: tableUri,
						uri: 'https://open.login.yahooapis.com/openid/op/auth'
					});
					
					var results = y.query( query ).results;
					
					//tests
					if ( results.error ) {
						output['fail'] = 'table should return success for a valid uri';
						return output;
					}
					
					var valid = results.success['ns'] 
						&& results.success['assoc_handle'] && results.success['session_type']
						&& results.success['assoc_type'] && results.success['expires_in'];						
					if ( !valid ) {
						output['fail'] = 'valid assoc from y! should have elements defined in the spec (ns, assoc_handle, etc)';
						return output;
					}
					
					//pass if no tests fail
					output['pass'] = ''
					return output;
				}(),
				function(){
					var output = {
						
						//https://open.login.yahooapis.com is a valid uri syntax, and will return 200, but not an assoc
						'name': 'valid uri syntax, 200 response, but invalid response format'
					};
					
					var query = 'use "{tableUri}" as table; select * from table where uri="{uri}"'.supplant({
						tableUri: tableUri,
						uri: 'https://open.login.yahooapis.com'
					});
					
					var results = y.query( query ).results;
					
					//tests
					if ( results.success ) {
						output['fail'] = 'table should return error for invalid response format';
						return output;
					}
					
					if ( -1 === results.error.indexOf( 'invalid response returned' ) ) {
						output['fail'] = "error message should specify 'invalid response returned', instead it's: "+results.error;
						return output;
					}
					
					//pass if no tests fail
					output['pass'] = ''
					return output;
				}()
			];
            
			response.object = { "case": testCases };
            
        ]]></execute>
        </select>
    </bindings>
</table>
