<?xml version="1.0" encoding="UTF-8"?>
<table xmlns="http://query.yahooapis.com/v1/schema/table.xsd">
    <meta>
        <author>Erik Eldridge</author>
        <description>
			Unit tests for openid url generation
		</description>
        <sampleQuery>select * from {table}</sampleQuery>
		<documentationURL>http://wiki.github.com/ydn/yql-openid-support/</documentationURL>
    </meta>
    <bindings>
        <select produces="JSON">
            <inputs>
				<key id="tableUri" type="xs:string" paramType="variable"/>
			</inputs>
            <execute><![CDATA[

			//js utils
			//supplant() & trim() credit: http://javascript.crockford.com/remedial.html
			if(!String.prototype.supplant){String.prototype.supplant=function(o){return this.replace(/{([^{}]*)}/g,function(a,b){var r=o[b];return typeof r==='string'||typeof r==='number'?r:a;});};}if(!String.prototype.trim){String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"");};}
			
			function parseQueryString (string) {
	            var params = string.split( '&' ),
	                pairs = {};
	            for (var i in params ) {
	                var pair = params[i].split( '=' );
	                pairs[ pair[0] ] = decodeURIComponent( pair[1] );
	            }
	            return pairs;
	        }
	
			//test data
			tableUri = tableUri || 'http://github.com/yql/yql-tables/raw/master/openid/openid.xml';
			var validReturnTo = 'http://test.erikeldridge.com/yql/openid/example.verify.html';
			var validAssocJson = '{"mac_key":"vN5O9I0A7Fxr1192Amq7KGK4UZA=","ns":"http","assoc_handle":"Ouk8a7L.fB0EafenhPselqapymq.r8640Jv0.H8WSdpn8SzKb3uj_cDb4GIIgqB4WuXD1XgYvkgkAagNd3pl.oY6Iqcw4bMJAwkTVeUGCFcsV1XLgqzoJ73_ff4yQ0k-","session_type":"no-encryption","expires_in":"14400","assoc_type":"HMAC-SHA1"}';
			var validAssertJson = '{"openid.ns":"http://specs.openid.net/auth/2.0","openid.mode":"id_res","openid.return_to":"http://test.erikeldridge.com/yql/openid/example.verify.html","openid.claimed_id":"https://me.yahoo.com/pandayak#415d4","openid.identity":"https://me.yahoo.com/pandayak","openid.assoc_handle":"Ouk8a7L.fB0EafenhPselqapymq.r8640Jv0.H8WSdpn8SzKb3uj_cDb4GIIgqB4WuXD1XgYvkgkAagNd3pl.oY6Iqcw4bMJAwkTVeUGCFcsV1XLgqzoJ73_ff4yQ0k-","openid.realm":"http://test.erikeldridge.com","openid.ns.oauth":"http://specs.openid.net/extensions/oauth/1.0","domain_unverified":"1","openid.response_nonce":"2010-04-02T05:00:20ZkGjAgp1R4lWRkAShqjBw1mhB0qwtQXVVQw--","openid.signed":"assoc_handle,claimed_id,identity,mode,ns,op_endpoint,response_nonce,return_to,signed,pape.auth_level.nist,ns.oauth,oauth.request_token","openid.op_endpoint":"https://open.login.yahooapis.com/openid/op/auth","openid.pape.auth_level.nist":"0","openid.oauth.request_token":"YhHa7LVu3AaRg4JNuo_XtLmKxPOxVkjt.hHsKeGol6uFZ_6lLfauZ5cHXiN4L9pxkg3AyXuMBHj0XHcB729G6Cjf8.xnnCH7iDRK8jBPTq5LQ8bna1P23jek.7nzy7evNVum9.ps80Q78DZN4MsHPXZ5bjGW2DUUAX9u0yvmBBRAEfRDfx2gIP6d8gFkX4qwdQlWa20bSZxxaSp4i3U-","openid.sig":"naLpyZxZfA/g3mJxzgDLduYtC+A="}';
			var validAxJson =  '[{"schema":"http://axschema.org/contact/email","alias":"email","required":true},{"schema":"http://axschema.org/namePerson","alias":"fullname","required":true},{"schema":"http://axschema.org/media/image/default","alias":"pic","required":true},{"schema":"http://axschema.org/person/gender","alias":"gender","required":true}]';
			//cases
			/*
			- required input
			-- valid io
			-- invalid id or returnTo
			- optional input
			-- valid io
			-- invalid axJson, oauthKey, or assocHandle
			id, return_to, axJson, oauthKey, assoc_handle
			*/
			testCases = [
				function(){
					var output = {
						'case': 'pass in valid, required input, and get expected output'
					};
					
					var returnTo = 'http://test.erikeldridge.com/yql/openid/example.verify.html';
					var query = "use '{tableUri}' as table; select * from table where id='yahoo.com' and return_to='{returnTo}'".supplant({
							tableUri: tableUri,
							returnTo: validReturnTo
						});
					var results = y.query( query ).results;
					
					//test for non-error response to valid input
					if ( results.error ) {
						output['fail'] = "we should be all good, but we're getting error: "+results.error;
						return output;
					}
					
					var authUriPieces = results.success.split( '?' );
					var baseUri = authUriPieces[0];
					var parsedParams = parseQueryString( authUriPieces[1] );
					
					//test for correct base uri, given canned test data
					if ( 'https://open.login.yahooapis.com/openid/op/auth' !== baseUri ) {
						output['fail'] = 'invalid baseUri: '+baseUri;
						return output;
					}
					
					//test existence of params
					var validParams = parsedParams['openid.ns'] && parsedParams['openid.claimed_id']
						&& parsedParams['openid.realm'] && parsedParams['openid.mode']
						&& parsedParams['openid.return_to'] && parsedParams['openid.identity'];
					if ( !validParams ) {
						output['fail'] = 'invalid params: '+parsedParams;
						return output;
					}
					
					//test value of generated params
					var validRealm = 'http://test.erikeldridge.com';
					if ( validRealm !== parsedParams['openid.realm'] ) {
						output['fail'] = 'invalid realm: '+parsedParams['openid.realm'];
						return output;
					}
					
					if ( returnTo !== parsedParams['openid.return_to'] ) {
						output['fail'] = 'invalid return_to: '+parsedParams['openid.return_to'];
						return output;
					}
					
					//pass if no tests fail
					output['pass'] = ''
					return output;
				}(),
				function(){
					var output = {
						'case': 'pass in invalid id, but valid returnTo'
					};
					
					var query = "use '{tableUri}' as table; select * from table where id='foo' and return_to='{returnTo}'".supplant({
							tableUri: tableUri,
							returnTo: validReturnTo
						});
					var results = y.query( query ).results;
					
					//test for error response to invalid input
					if ( results.success ) {
						output['fail'] = "we should get an error, but we're getting a success response";
						return output;
					}
					
					//test for correct error type
					if ( -1 !== results.error.indexOf('invalid id') ) {
						output['fail'] = 'we should get an invalid id error, not: '+results.error;
						return output;
					}
					
					//pass if no tests fail
					output['pass'] = ''
					return output;
				},//deacivated pending openid.xml debugging 
				function(){
					var output = {
						'case': 'pass in invalid returnTo, but valid id'
					};
					
					var query = "use '{tableUri}' as table; select * from table where id='yahoo.com' and return_to='{returnTo}'".supplant({
							tableUri: tableUri,
							returnTo: 'randomuri'
						});
					var results = y.query( query ).results;
					
					//test for error response to invalid input
					if ( results.success ) {
						output['fail'] = "we should get an error, but we're getting a success response";
						return output;
					}
					
					//test for correct error type
					if ( -1 !== results.error.indexOf('invalid returnTo') ) {
						output['fail'] = 'we should get an invalid returnTo error, not: '+results.error;
						return output;
					}
					
					//pass if no tests fail
					output['pass'] = ''
					return output;
				}(),
				function(){
					var output = {
						'case': 'pass in valid id, returnto, and axjson'
					};
					
					var query = "use '{tableUri}' as table; select * from table where id='yahoo.com' and return_to='{returnTo}' and axJson='{axJson}'".supplant({
							tableUri: tableUri,
							returnTo: validReturnTo,
							axJson: validAxJson
						});
					var results = y.query( query ).results;
					
					//test for success response
					if ( results.error ) {
						output['fail'] = "we should get success response, but we're getting an error";
						return output;
					}
					
					var parsedParams = parseQueryString( results.success.split( '?' )[1] );
					
					var validAxParams = parsedParams['openid.ns.ax'] && parsedParams['openid.ax.mode']
						&& parsedParams['openid.ax.type.fullname'] && parsedParams['openid.ax.type.gender']
						&& parsedParams['openid.ax.type.email'] && parsedParams['openid.openid.ax.type.pic']
						&& parsedParams['openid.openid.ax.required'];
					//test for correct error type
					if ( !validAxParams ) {
						output['fail'] = 'invalid ax params: '+parsedParams;
						return output;
					}
					
					//pass if no tests fail
					output['pass'] = ''
					return output;
				}()
			];
            
			response.object = { cases: testCases };
            
        ]]></execute>
        </select>
    </bindings>
</table>
